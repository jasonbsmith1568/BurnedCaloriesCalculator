
import java.awt.Component;
import java.text.DecimalFormat;
import java.util.List;
import javax.swing.DefaultListSelectionModel;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DvdCollectionView.java
 *
 * Created on Jun 20, 2012, 9:58:08 AM
 */
/**
 *
 * @author vandersmissenc
 */
public class DvdCollectionView extends javax.swing.JFrame {

    private DvdCollectionController parent;

    /** Creates new form DvdCollectionView */
    public DvdCollectionView(DvdCollectionController pController) {
        parent = pController;
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        toolbarMenu = new javax.swing.JToolBar();
        listAllByTitleButton = new javax.swing.JButton();
        listAllByYearButton = new javax.swing.JButton();
        seperator = new javax.swing.JToolBar.Separator();
        addButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        contentPanel = new javax.swing.JPanel();
        searchField = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        scrollPanel = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        mainMenu = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        loadButton = new javax.swing.JMenuItem();
        saveButton = new javax.swing.JMenuItem();
        exitButton = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        toolbarMenu.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(128, 128, 128)));
        toolbarMenu.setFloatable(false);
        toolbarMenu.setRollover(true);

        listAllByTitleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/customicondesign-office-png/addressbook32.png"))); // NOI18N
        listAllByTitleButton.setText("List All By Title");
        listAllByTitleButton.setBorderPainted(false);
        listAllByTitleButton.setFocusable(false);
        listAllByTitleButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        listAllByTitleButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        listAllByTitleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listAllByTitleButtonActionPerformed(evt);
            }
        });
        toolbarMenu.add(listAllByTitleButton);

        listAllByYearButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/customicondesign-office-png/calendar32.png"))); // NOI18N
        listAllByYearButton.setText("List All By Year");
        listAllByYearButton.setBorderPainted(false);
        listAllByYearButton.setFocusable(false);
        listAllByYearButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        listAllByYearButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        listAllByYearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listAllByYearButtonActionPerformed(evt);
            }
        });
        toolbarMenu.add(listAllByYearButton);
        toolbarMenu.add(seperator);

        addButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/customicondesign-office-png/add1-32.png"))); // NOI18N
        addButton.setText("Add");
        addButton.setBorderPainted(false);
        addButton.setFocusable(false);
        addButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        toolbarMenu.add(addButton);

        removeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/customicondesign-office-png/delete32.png"))); // NOI18N
        removeButton.setText("Remove");
        removeButton.setBorderPainted(false);
        removeButton.setFocusable(false);
        removeButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        removeButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });
        toolbarMenu.add(removeButton);

        editButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/customicondesign-office-png/application32.png"))); // NOI18N
        editButton.setText("Edit");
        editButton.setBorderPainted(false);
        editButton.setFocusable(false);
        editButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        editButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });
        toolbarMenu.add(editButton);

        searchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/customicondesign-office-png/info-16.png"))); // NOI18N
        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title", "Category", "Running Time", "Year Released", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        table.getTableHeader().setReorderingAllowed(false);
        scrollPanel.setViewportView(table);

        org.jdesktop.layout.GroupLayout contentPanelLayout = new org.jdesktop.layout.GroupLayout(contentPanel);
        contentPanel.setLayout(contentPanelLayout);
        contentPanelLayout.setHorizontalGroup(
            contentPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(contentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(contentPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(scrollPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 579, Short.MAX_VALUE)
                    .add(contentPanelLayout.createSequentialGroup()
                        .add(searchField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 237, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(searchButton)))
                .addContainerGap())
        );
        contentPanelLayout.setVerticalGroup(
            contentPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(contentPanelLayout.createSequentialGroup()
                .add(12, 12, 12)
                .add(contentPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(searchField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(searchButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(scrollPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        fileMenu.setText("File");

        loadButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/customicondesign-office-png/import16.png"))); // NOI18N
        loadButton.setText("Load");
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });
        loadButton.addMenuKeyListener(new javax.swing.event.MenuKeyListener() {
            public void menuKeyPressed(javax.swing.event.MenuKeyEvent evt) {
                loadButtonMenuKeyPressed(evt);
            }
            public void menuKeyReleased(javax.swing.event.MenuKeyEvent evt) {
            }
            public void menuKeyTyped(javax.swing.event.MenuKeyEvent evt) {
            }
        });
        fileMenu.add(loadButton);

        saveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/customicondesign-office-png/export16.png"))); // NOI18N
        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        fileMenu.add(saveButton);

        exitButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/customicondesign-office-png/close16.png"))); // NOI18N
        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });
        fileMenu.add(exitButton);

        mainMenu.add(fileMenu);

        setJMenuBar(mainMenu);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(toolbarMenu, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 599, Short.MAX_VALUE)
            .add(contentPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(toolbarMenu, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 68, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(contentPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        parent.loadFilePressed();
    }//GEN-LAST:event_loadButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        parent.addPressed();
    }//GEN-LAST:event_addButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        parent.exit();
    }//GEN-LAST:event_exitButtonActionPerformed

    private void loadButtonMenuKeyPressed(javax.swing.event.MenuKeyEvent evt) {//GEN-FIRST:event_loadButtonMenuKeyPressed
    }//GEN-LAST:event_loadButtonMenuKeyPressed

    private void listAllByTitleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listAllByTitleButtonActionPerformed
        parent.listAllByTitlePressed();
    }//GEN-LAST:event_listAllByTitleButtonActionPerformed

    private void listAllByYearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listAllByYearButtonActionPerformed
        parent.listAllByYearPressed();
    }//GEN-LAST:event_listAllByYearButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        parent.saveFilePressed();
    }//GEN-LAST:event_saveButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        int selectedRow = table.getSelectedRow();
        if (selectedRow >= 0) {
            String title = table.getValueAt(selectedRow, 0).toString();
            String category = table.getValueAt(selectedRow, 1).toString();
            int runningTime = Integer.parseInt(table.getValueAt(selectedRow, 2).toString());
            int yearReleased = Integer.parseInt(table.getValueAt(selectedRow, 3).toString());
            double price = Double.parseDouble(table.getValueAt(selectedRow, 4).toString());
            parent.removePressed(new Dvd(title, category, runningTime, yearReleased, price));
        }
    }//GEN-LAST:event_removeButtonActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        int selectedRow = table.getSelectedRow();
        if (selectedRow >= 0) {
            parent.editPressed();
        }
    }//GEN-LAST:event_editButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        parent.searchPressed();
    }//GEN-LAST:event_searchButtonActionPerformed

    public String getSearchTerm() {
        return searchField.getText();
    }

    public void reloadTable(List<Dvd> data) {
        MyTableModel model = new MyTableModel(data);
        table.setModel(model);
        table.setRowSelectionAllowed(true);
        table.setColumnSelectionInterval(0, 4);
        table.setSelectionModel(model.select);
        table.getColumnModel().getColumn(4).setCellRenderer(new MoneyFormatRenderer());
    }

    public Dvd getSelectedDvd() {
        int selectedRow = table.getSelectedRow();
        if (selectedRow >= 0) {
            String title = table.getValueAt(selectedRow, 0).toString();
            String category = table.getValueAt(selectedRow, 1).toString();
            int runningTime = Integer.parseInt(table.getValueAt(selectedRow, 2).toString());
            int yearReleased = Integer.parseInt(table.getValueAt(selectedRow, 3).toString());
            double price = Double.parseDouble(table.getValueAt(selectedRow, 4).toString());
            return new Dvd(title, category, runningTime, yearReleased, price);
        }
        return null;
    }
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JPanel contentPanel;
    private javax.swing.JButton editButton;
    private javax.swing.JMenuItem exitButton;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JButton listAllByTitleButton;
    private javax.swing.JButton listAllByYearButton;
    private javax.swing.JMenuItem loadButton;
    private javax.swing.JMenuBar mainMenu;
    private javax.swing.JButton removeButton;
    private javax.swing.JMenuItem saveButton;
    private javax.swing.JScrollPane scrollPanel;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchField;
    private javax.swing.JToolBar.Separator seperator;
    private javax.swing.JTable table;
    private javax.swing.JToolBar toolbarMenu;
    // End of variables declaration//GEN-END:variables

    static class MoneyFormatRenderer extends DefaultTableCellRenderer {

        private DecimalFormat df = new DecimalFormat("0.00");

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            value = df.format((Number) value);
            return super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
        }
    }
}

class MyTableModel extends AbstractTableModel {

    final String[] columnNames = {"Title", "Category", "Running Time", "Year Released", "Price"};
    private List<Dvd> data;
    final ListSelectionModel select;

    MyTableModel(List<Dvd> newData) {
        data = newData;
        select = new DefaultListSelectionModel();
        select.setSelectionMode(select.SINGLE_INTERVAL_SELECTION);
    }

    public int getRowCount() {
        int result = 0;
        if (data != null) {
            result = data.size();
        }
        return result;
    }

    public int getColumnCount() {
        return columnNames.length;
    }

    public String getColumnName(int col) {
        return columnNames[col];
    }

    public Object getValueAt(int row, int col) {
        Dvd theDvd = data.get(row);
        Object theData = null;
        switch (col) {
            case 0:
                theData = theDvd.getTitle();
                break;
            case 1:
                theData = theDvd.getCategory();
                break;
            case 2:
                theData = theDvd.getRunningTime();
                break;
            case 3:
                theData = theDvd.getYearReleased();
                break;
            case 4:
                theData = theDvd.getPrice();
                break;
            default:
                break;
        }
        return theData;
    }

    public boolean isCellEditable(int row, int col) {
        return false;
    }
}
